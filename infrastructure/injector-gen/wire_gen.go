// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector_gen

import (
	"github.com/Journerist/drone-backend/infrastructure/provider"
	"github.com/Journerist/drone-backend/infrastructure/service"
	"github.com/journerist/drone-backend/interfaces"
)

// Injectors from injection.go:

func InitializeTaskScheduler() (service.TaskScheduler, error) {
	taskRepository, err := provider.ProvideTaskRepository()
	if err != nil {
		return service.TaskScheduler{}, err
	}
	taskScheduler, err := provider.ProvideTaskScheduler(taskRepository)
	if err != nil {
		return service.TaskScheduler{}, err
	}
	return taskScheduler, nil
}

func InitializeControllerStarter() (interfaces.ControllerStarter, error) {
	application, err := provider.ProvideIrisApp()
	if err != nil {
		return interfaces.ControllerStarter{}, err
	}
	commandRepository, err := provider.ProvideCommandRepository()
	if err != nil {
		return interfaces.ControllerStarter{}, err
	}
	commandController, err := provider.ProvideCommandController(application, commandRepository)
	if err != nil {
		return interfaces.ControllerStarter{}, err
	}
	controllerStarter, err := provider.ProvideControllerStarter(commandController)
	if err != nil {
		return interfaces.ControllerStarter{}, err
	}
	return controllerStarter, nil
}
